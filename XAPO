# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Geocoded_Addresses.py
# Created on: 2015-10-09 12:26:53.00000
#   (generated by ArcGIS/ModelBuilder)
# Modified by Ren√© Casiano
# Description: 
# ---------------------------------------------------------------------------

# Import modules
import arcpy, sys, textwrap
from datetime import datetime

print " Running against: {}".format(sys.version)

# External data locations
countyMstrAddrPtsOrigin = "P:\\Address\\Shapefile\\mstr_address_pt.shp"
parcelOrigin = "P:\\Property\\parcel\\Shapefile\\parcel.shp"

#SQL data locations
landRecordsSDE = "C:\\Users\\rcasiano\\Desktop\\APO\\SDE\\LandRecords_Accela.sde"
coreSDE = "C:\\Users\\rcasiano\\Desktop\\APO\\SDE\\Core_Accela.sde"
codeSDE = "C:\\Users\\rcasiano\\Desktop\\APO\\SDE\\Code_Accela.sde"
apoFDS = "\\Core.DBO.AccelaAPO"
pjFDS = "\\LandRecords.DATA.Political and Jurisdictional"
cityLimits = landRecordsSDE + pjFDS+ "\\LandRecords.DATA."+"CityLimitsSB"
parcels = coreSDE + "\\Core.DBO."+ "Parcels_County"
sbMstrAddrPts = coreSDE + "\\Core.DBO." + "MasterAddressPoints"
countyBlocks = coreSDE + apoFDS + "\\Core.DBO." + "AccelaCountyBlock"
councilDistricts = landRecordsSDE + pjFDS + "\\LandRecords.DATA."+"SB_Districts_2014"
accelaAddressLocator = coreSDE + "\\Core.DBO." + "AddressLocator"
inspectorAreas = codeSDE + "\\Code.GISVIEWER."+"InspectorAreas"

#SQL locations of final XAPO feature classes
address = coreSDE + apoFDS + "\\Core.DBO."+ "Address"
parcel = coreSDE + apoFDS + "\\Core.DBO." + "Parcel"
owner = coreSDE + apoFDS + "\\Core.DBO." + "Owner"

# Variables
arcpy.env.overwriteOutput = True
startTime = datetime.now()
time = startTime
timeText = "Time to finish"
parcelSB_lyr = "parcelSB_lyr"
parcelSBRaw_lyr = "parcelSBRaw_lyr"
addrSB_lyr = "addrSB_lyr"
missing_lyr = "missing_lyr"
owner_lyr = "owner_lyr"
base_lyr = "base_lyr"

#In memory locations
inMem = "in_memory"
memParcels = inMem + "\\memParcels" 
memAddrs = inMem + "\\memAddrs"
memSJ = inMem + "\\memSJ"
memOwner = inMem + "\\memOwner"
memBase = inMem + "\\memBase"

def logTask(logText):
	print logText
	global time
	time = datetime.now()

def logTime():
	print "\t",timeText,datetime.now()- time,"\n"
	
# Main program
def address():
	# Copying parcel shapefile to SQL
	logTask("***Starting parcel copy to SQL DB***")
	arcpy.FeatureClassToFeatureClass_conversion(parcelOrigin,coreSDE,"Parcels_County")
	logTime()

	# Creating feature layers
	logTask("***Creating feature layers***")
	arcpy.MakeFeatureLayer_management(parcels,parcelSB_lyr)
	# Feature layer here for Deb and John's SB parcels
	arcpy.MakeFeatureLayer_management(parcels,parcelSBRaw_lyr)
	arcpy.MakeFeatureLayer_management(sbMstrAddrPts,addrSB_lyr,"\"PARCELSTAT\" IS NOT NULL")
	arcpy.MakeFeatureLayer_management(countyMstrAddrPtsOrigin,missing_lyr)
	logTime()
	
	# See what parcels SB master address points aren't in the parcel layer
	logTask("***Selecting parcels that aren't in SB address data but ARE in SB***")
	arcpy.SelectLayerByAttribute_management(parcelSB_lyr,"NEW_SELECTION","PARCELSTAT NOT IN (SELECT \"PARCELSTAT\" FROM MasterAddressPoints WHERE \"PARCELSTAT\" IS NOT NULL)")
	logTime()
	
	# Select "missing" parcels and SB master address points within SB city limits
	logTask("***Starting selection by location***")
	
	arcpy.SelectLayerByLocation_management(parcelSB_lyr,"HAVE_THEIR_CENTER_IN",cityLimits,"","SUBSET_SELECTION")
	arcpy.SelectLayerByLocation_management(addrSB_lyr,"COMPLETELY_WITHIN",cityLimits)
	# Export raw SB parcels just for Deb and John
	arcpy.SelectLayerByLocation_management(parcelSBRaw_lyr,"HAVE_THEIR_CENTER_IN",cityLimits)
	arcpy.FeatureClassToFeatureClass_conversion(parcelSBRaw_lyr,coreSDE,"Parcels")
	
	print " "
	print arcpy.GetCount_management(parcelSB_lyr),"selected \"missing\" parcels within SB city limits."
	print arcpy.GetCount_management(addrSB_lyr), "selected addresses within SB city limits."
	logTime()
	
	# Get missing addresses of missing parcels from County master address points
	logTask("***Getting \"missing\" address points from County data***")
	
	arcpy.SelectLayerByLocation_management(missing_lyr,"COMPLETELY_WITHIN",parcelSB_lyr)
	
	print " " 
	print arcpy.GetCount_management(missing_lyr),"selected \"missing\" address points within SB city limits."
	logTime()

	# Merging SB address points in SB with PARCELSTAT field with \"missing\" County addresses
	logTask("***Starting to merge addresses***")
		  
	arcpy.Merge_management([missing_lyr,addrSB_lyr], memAddrs)
	
	logTime()

	#Adding and calculating all necessary Accela fields
	logTask("***Starting to add all new fields and calculate them***")
	
	codeBlock = textwrap.dedent("""\
			def Choice(City,County):
				if (City is not None and City != " " and City != ""):
					return City
				elif (City is None and County != " " and County != ""):
					return County
				else:      
					return None""")
							
	# Add field and calculate: HouseNumber
	arcpy.AddField_management(memAddrs, "HouseNumber", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "HouseNumber", "Choice( !Street_Number!, !STRNUM1!)", "PYTHON_9.3",codeBlock)

	# Add field and calculate: StreetDirection_Pre
	arcpy.AddField_management(memAddrs, "StreetDirection_Pre", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "StreetDirection_Pre", "Choice( !Street_Dir!, !FEDIRP!)", "PYTHON_9.3", codeBlock)

	# Add field and calculate: StreetName
	arcpy.AddField_management(memAddrs, "StreetName", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "StreetName", "Choice( !Street_Name!, !STRNAME!)", "PYTHON_9.3", codeBlock)

	# Add field and calculate: StreetSuffix
	arcpy.AddField_management(memAddrs, "StreetSuffix", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "StreetSuffix", "Choice( !Street_Suffix!, !STRTYPE!)", "PYTHON_9.3", codeBlock)

	# Add field and calculate: StreetDirection_Post
	arcpy.AddField_management(memAddrs, "StreetDirection_Post", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "StreetDirection_Post", "!Post_Street_Dir!","PYTHON_9.3")

	# Add field and calculate: Line2
	arcpy.AddField_management(memAddrs, "Line2", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock2 = textwrap.dedent("""\
			def Line2 (pre, num, apt):
				if (pre is not None):
					return pre    
				elif (apt is not None):
					return apt    
				else:        
					return num""")
	arcpy.CalculateField_management(memAddrs, "Line2", "Line2( !Street_Qualifier!, !STRNUM2!, !Street_Apt_Num! )", "PYTHON_9.3", codeBlock2)
	arcpy.CalculateField_management(memAddrs, "Line2", "Null(!Line2!)", "PYTHON_9.3", "def Null(makeNull):\\n\\n    if (makeNull == \" \"):\\n        return None\\n    else:\\n        return makeNull")
	
	# Add field and calculate: City
	arcpy.AddField_management(memAddrs, "City1", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "City1", "\"SOUTH BEND\"", "PYTHON_9.3")

	# Add field and calculate: State
	arcpy.AddField_management(memAddrs, "State1", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "State1", "\"IN\"", "PYTHON_9.3")

	# Add field and calculate: Zip
	arcpy.AddField_management(memAddrs, "ZipCode", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "ZipCode", "Choice(!Zip!,!PROPERTYZI!)", "PYTHON_9.3",codeBlock) 
	arcpy.CalculateField_management(memAddrs, "ZipCode", "!ZipCode![:5]", "PYTHON_9.3")
	
	logTime()
			
	# Deleting extra fields
	logTask("***Deleting extra fields***")
	
	dropFields = ["created_user","created_date","last_edited_user","last_edited_date"]
	arcpy.DeleteField_management(memAddrs,dropFields)
	
	logTime()
	
	# Process: Add Geometry Attributes
	logTask("***Altering geometric attributes***")
	
	arcpy.AddGeometryAttributes_management(memAddrs, "POINT_X_Y_Z_M", "", "","GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")

	logTime()
	
	logTask("***Adding and calculating all necesary Accela fields in order***")
	
	# Add field and calculate: ADDRESS_RANGE
	arcpy.AddField_management(memAddrs, "ADDRESS_RANGE", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			import re
			def house_number_end(StreetField):
				a = re.search(\"\"\"^.?to\\s(\\d{3,7})\"\"\",StreetField,re.IGNORECASE)
				if a is not None:
					return int(a.group(1))
				else:
					return None""")
	arcpy.CalculateField_management(memAddrs, "ADDRESS_RANGE", "house_number_end(!Line2!)", "PYTHON_9.3",codeBlock)
	
	# Add field and calculate: UNIT_NUMBER
	arcpy.AddField_management(memAddrs, "UNIT_NUMBER", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			import re
			def Unit_Number(StreetField):   
				a = re.search(\"\"\"^[a-z]?[0-9]*[a-z]{0,1}$\"\"\", StreetField, re.IGNORECASE)    
				if a is not None:        
					return a.group(0)   
				else:       
					return None""")
	arcpy.CalculateField_management(memAddrs, "UNIT_NUMBER", "Unit_Number(!Line2!)", "PYTHON_9.3",codeBlock) 
				

	# Add field and calculate: APARTMENT_NUMBER
	arcpy.AddField_management(memAddrs, "APARTMENT_NUMBER", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			import re
			def apartment_number(StreetField):    
				a = re.search(\"\"\"^.?Apt\\s(\\d{3,7})\"\"\",StreetField,re.IGNORECASE)   
				if a is not None:
					return int(a.group(1))
				else:      
					return None""")
	arcpy.CalculateField_management(memAddrs, "APARTMENT_NUMBER", "apartment_number(!Line2!)", "PYTHON_9.3", codeBlock)
	
	# All fields before SERV_PROV_CODE need to be dropped to be consistent with the Accela APO schema
	dropFields = []
	passFields =["OID","Geometry","Guid"]
	fields = arcpy.ListFields(memAddrs)
	
	for field in fields:
		if field.type in passFields:
			pass
		else:
			dropFields.append(field.name)
	
	# Add field and calculate: SERV_PROV_CODE
	arcpy.AddField_management(memAddrs, "SERV_PROV_CODE", "TEXT", "", "", "15", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "SERV_PROV_CODE", "'SOUTHBENDIN'", "PYTHON_9.3", "")

	# Add field and calculate: SOURCE_SEQ_NBR
	arcpy.AddField_management(memAddrs, "SOURCE_SEQ_NBR", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "SOURCE_SEQ_NBR", "259", "PYTHON_9.3", "")

	# Add field and calculate: L1_PARCEL_NBR
	arcpy.AddField_management(memAddrs, "L1_PARCEL_NBR", "TEXT", "", "", "24", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_PARCEL_NBR", "!PARCELSTAT!", "PYTHON_9.3", "")
	
	# Add field and calculate: L1_X_COORD
	arcpy.AddField_management(memAddrs, "L1_X_COORD", "DOUBLE", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_X_COORD", "!POINT_X!", "PYTHON_9.3")

	# Add field and calculate: L1_Y_COORD
	arcpy.AddField_management(memAddrs, "L1_Y_COORD", "DOUBLE", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_Y_COORD", "!POINT_Y!", "PYTHON_9.3")
	
	# Process: Add Field: L1_ADDR_DESC
	arcpy.AddField_management(memAddrs, "L1_ADDR_DESC", "TEXT", "", "", "255", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_ADDRESS1
	arcpy.AddField_management(memAddrs, "L1_ADDRESS1", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			def Line1(houseStart, houseEnd, strDir, strName, strSuf, strSufDir):
				if (houseEnd is not None):
					if (strDir is not None):
						if (strDir  is not None) and (strSuf is not None) and (strSufDir is not None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strDir + " " + strName + " " + strSuf + " " + strSufDir
						elif (strDir is not None) and (strSuf is not None) and (strSufDir is None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strDir + " " + strName + " " + strSuf
						elif (strDir is not None) and (strSuf is None) and (strSufDir is not None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strDir + " " + strName + " " + strSufDir
						elif (strDir is not None) and (strSuf is None) and (strSufDir is None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strDir + " " + strName
					elif (strDir is None):
						if (strSuf is not None) and (strSufDir is not None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strName + " " + strSuf + " " + strSufDir
						elif (strSuf is not None) and (strSufDir is None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strName + " " + strSuf
						elif (strSuf is None) and (strSufDir is not None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strName + " " + strSufDir
						elif (strSuf is None) and (strSufDir is None):
							return str(houseStart)+"-"+ str(houseEnd) + " " + strName
				elif (houseEnd is None):
					if (strDir is not None):
						if (strDir  is not None) and (strSuf is not None) and (strSufDir is not None):
							return str(houseStart) + " " + strDir + " " + strName + " " + strSuf + " " + strSufDir
						elif (strDir is not None) and (strSuf is not None) and (strSufDir is None):
							return str(houseStart) + " " + strDir + " " + strName + " " + strSuf
						elif (strDir is not None) and (strSuf is None) and (strSufDir is not None):
							return str(houseStart) + " " + strDir + " " + strName + " " + strSufDir
						elif (strDir is not None) and (strSuf is None) and (strSufDir is None):
							return str(houseStart) + " " + strDir + " " + strName
					elif (strDir is None):
						if (strSuf is not None) and (strSufDir is not None):
							return str(houseStart) + " " + strName + " " + strSuf + " " + strSufDir
						elif (strSuf is not None) and (strSufDir is None):
							return str(houseStart) + " " + strName + " " + strSuf
						elif (strSuf is None) and (strSufDir is not None):
							return str(houseStart) + " " + strName + " " + strSufDir
						elif (strSuf is None) and (strSufDir is None):
							return str(houseStart) + " " + strName""")
	arcpy.CalculateField_management(memAddrs, "L1_ADDRESS1", "Line1( !L1_HSE_NBR_START!, !L1_HSE_NBR_END!, !L1_STR_DIR!, !L1_STR_NAME!, !L1_STR_SUFFIX!, !L1_STR_SUFFIX_DIR!)", "PYTHON_9.3", codeBlock)
	
	# Add field and calculate: L1_ADDRESS2
	arcpy.AddField_management(memAddrs, "L1_ADDRESS2", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			def Line2(type, number):
				if (number is not None):
					return type + " " + number
				else:
					return None""")
	arcpy.CalculateField_management(memAddrs, "L1_ADDRESS2", "Line2( !L1_UNIT_TYPE!, !L1_UNIT_START!)", "PYTHON_9.3",codeBlock)
	
	# Process: Add Field: L1_ADDR_STATUS
	arcpy.AddField_management(memAddrs, "L1_ADDR_STATUS", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_ADDR_TYPE_FLAG
	arcpy.AddField_management(memAddrs, "L1_ADDR_TYPE_FLAG", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_DATE
	arcpy.AddField_management(memBase, "AUDIT_DATE", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_ID
	arcpy.AddField_management(memBase, "AUDIT_ID", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_STATUS
	arcpy.AddField_management(memBase, "AUDIT_STATUS", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "AUDIT_STATUS", "\"A\"", "PYTHON_9.3")
	
	# Add field and calculate: L1_SITUS_CITY
	arcpy.AddField_management(memAddrs, "L1_SITUS_CITY", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_SITUS_CITY", "\"SOUTH BEND\"", "PYTHON_9.3")
	
	# Add field and calculate: L1_SITUS_COUNTRY
	arcpy.AddField_management(memAddrs, "L1_SITUS_COUNTRY", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_SITUS_COUNTRY", "\"UNITED STATES\"", "PYTHON_9.3")
	
	# Process: Add Field: L1_SITUS_COUNTRY_CODE
	arcpy.AddField_management(memAddrs, "L1_SITUS_COUNTRY_CODE", "TEXT", "", "", "2", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_SITUS_COUNTY
	arcpy.AddField_management(memAddrs, "L1_SITUS_COUNTY", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_SITUS_COUNTY", "\"ST. JOSEPH\"", "PYTHON_9.3")
	
	# Add field: L1_DISTANCE
	arcpy.AddField_management(memAddrs, "L1_DISTANCE", "LONG", "", "", "8", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: EVENT_ID
	arcpy.AddField_management(memBase, "EVENT_ID", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_FULL_ADDRESS
	arcpy.AddField_management(memAddrs, "L1_FULL_ADDRESS", "TEXT", "", "", "1024", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			def FullAddress(Line1, Line2, City, State, Zip):
				if (Line2 is not None):
					if (Zip is not None):
						return Line1 + " " + Line2 + " " + City + " " + State + " " + Zip
					elif (Zip is None):
						return Line1 + " " + Line2 + " " + City + " " + State
				elif (Line2 is None):
					if (Zip is not None):
						return Line1 + " " + City + " " + State + " " + Zip
					elif (Zip is None):
						return Line1 + " " + City + " " + State""")
	arcpy.CalculateField_management(memAddrs, "L1_FULL_ADDRESS", "FullAddress(!L1_ADDRESS1!, !L1_ADDRESS2!, !L1_SITUS_CITY!, !L1_SITUS_STATE!, !L1_SITUS_ZIP!)", "PYTHON_9.3",codeBlock)
	
	# Process: Add Field: L1_HSE_FRAC_NBR_END
	arcpy.AddField_management(memAddrs, "L1_HSE_FRAC_NBR_END", "TEXT", "", "", "3", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_HSE_FRAC_NBR_START
	arcpy.AddField_management(memAddrs, "L1_HSE_FRAC_NBR_START", "TEXT", "", "", "4", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_HSE_NBR_ALPHA_END
	arcpy.AddField_management(memAddrs, "L1_HSE_NBR_ALPHA_END", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_HSE_NBR_ALPHA_START
	arcpy.AddField_management(memAddrs, "L1_HSE_NBR_ALPHA_START", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_HSE_NBR_END
	arcpy.AddField_management(memAddrs, "L1_HSE_NBR_END", "TEXT", "", "", "9", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_HSE_NBR_END", "!ADDRESS_RANGE!", "PYTHON_9.3")
	
	# Add field and calculate: L1_HSE_NBR_START
	arcpy.AddField_management(memAddrs, "L1_HSE_NBR_START", "LONG", "", "", "9", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_HSE_NBR_START", "!HouseNumber!", "PYTHON_9.3")

	# Process: Add Field: L1_INSP_DISTRICT
	arcpy.AddField_management(memAddrs, "L1_INSP_DISTRICT", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_INSP_DISTRICT_PREFIX
	arcpy.AddField_management(memAddrs, "L1_INSP_DISTRICT_PREFIX", "TEXT", "", "", "6", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_LEVEL_PREFIX
	arcpy.AddField_management(memAddrs, "L1_LEVEL_PREFIX", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_LEVEL_NBR_START
	arcpy.AddField_management(memAddrs, "L1_LEVEL_NBR_START", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_LEVEL_NBR_END
	arcpy.AddField_management(memAddrs, "L1_LEVEL_NBR_END", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
		
	# Process: Add Field: L1_LOT
	arcpy.AddField_management(memAddrs, "L1_LOT", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_SITUS_NBRHD
	arcpy.AddField_management(memAddrs, "L1_SITUS_NBRHD", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_SITUS_NBRHD_PREFIX
	arcpy.AddField_management(memAddrs, "L1_SITUS_NBRHD_PREFIX", "TEXT", "", "", "6", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_PRIMARY_FLAG
	arcpy.AddField_management(memAddrs, "L1_PRIMARY_FLAG", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs,"L1_PRIMARY_FLAG","\"Y\"","PYTHON_9.3")
	
	# Process: Add Field: L1_SEC_ROAD
	arcpy.AddField_management(memAddrs, "L1_SEC_ROAD", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_SEC_RD_NBR
	arcpy.AddField_management(memAddrs, "L1_SEC_RD_NBR", "LONG", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_SOURCE_FLAG
	arcpy.AddField_management(memAddrs, "L1_SOURCE_FLAG", "TEXT", "", "", "3", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_SITUS_STATE
	arcpy.AddField_management(memAddrs, "L1_SITUS_STATE", "TEXT", "", "", "2", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_SITUS_STATE", "\"IN\"", "PYTHON_9.3")
	
	# Add field and calculate: L1_STR_DIR
	arcpy.AddField_management(memAddrs, "L1_STR_DIR", "TEXT", "", "", "2", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_STR_DIR", "!StreetDirection_Pre!", "PYTHON_9.3")
	arcpy.CalculateField_management(memAddrs, "L1_STR_DIR", "!L1_STR_DIR!.replace(\" \",\"\")", "PYTHON_9.3")

	# Add field and calculate: L1_STR_NAME
	arcpy.AddField_management(memAddrs, "L1_STR_NAME", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_STR_NAME", "!StreetName!", "PYTHON_9.3")
	
	# Process: Add Field: L1_STR_PREFIX
	arcpy.AddField_management(memAddrs, "L1_STR_PREFIX", "TEXT", "", "", "6", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_STR_SUFFIX
	arcpy.AddField_management(memAddrs, "L1_STR_SUFFIX", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_STR_SUFFIX", "!StreetSuffix!", "PYTHON_9.3")
	
	# Add field and calculate: L1_STR_SUFFIX_DIR
	arcpy.AddField_management(memAddrs, "L1_STR_SUFFIX_DIR", "TEXT", "", "", "5", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_STR_SUFFIX_DIR", "!StreetDirection_Post!", "PYTHON_9.3")
	arcpy.CalculateField_management(memAddrs, "L1_STR_SUFFIX_DIR", "!L1_STR_SUFFIX_DIR!.replace(\" \",\"\")", "PYTHON_9.3")

	# Process: Add Field: L1_SUBDIVISION
	arcpy.AddField_management(memAddrs, "L1_SUBDIVISION", "TEXT", "", "", "240", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_UNIT_END
	arcpy.AddField_management(memAddrs, "L1_UNIT_END", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field and calculate: L1_UNIT_START
	arcpy.AddField_management(memAddrs, "L1_UNIT_START", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			def UnitNumber(Unit, Apartment):    
				if (Unit is not None):        
					return Unit    
				else:        
					return Apartment""")
	arcpy.CalculateField_management(memAddrs, "L1_UNIT_START", "UnitNumber(!UNIT_NUMBER!, !APARTMENT_NUMBER! )", "PYTHON_9.3", codeBlock)
	# Process: Calculate Field: L1_UNIT_START (Remove Directional)
	codeBlock = textwrap.dedent("""\
			def ReplaceDirectional(Unit):   
				if (Unit == \"W\") or (Unit == \"E\"):        
					return None    
				else:        
					return Unit""")
	arcpy.CalculateField_management(memAddrs, "L1_UNIT_START", "ReplaceDirectional( !L1_UNIT_START!)", "PYTHON_9.3",codeBlock)
				
	# Add field and calculate: L1_UNIT_TYPE
	arcpy.AddField_management(memAddrs, "L1_UNIT_TYPE", "TEXT", "", "", "6", "", "NULLABLE", "NON_REQUIRED", "")
	codeBlock = textwrap.dedent("""\
			def UnitType(Apartment, Unit):   
				if (Apartment is not None):        
					return \"Apt\"   
				elif (Unit is not None):        
					return \"Unit\"    
				else:       
					return None""")
	arcpy.CalculateField_management(memAddrs, "L1_UNIT_TYPE", "UnitType( !APARTMENT_NUMBER!, !UNIT_NUMBER! )", "PYTHON_9.3", codeBlock)
	
	# Add field and calculate: L1_SITUS_ZIP
	arcpy.AddField_management(memAddrs, "L1_SITUS_ZIP", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "L1_SITUS_ZIP", "!ZipCode!", "PYTHON_9.3")

	# Add field and calculate: ATTRIB_TEMP_NAME_1
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_1", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "ATTRIB_TEMP_NAME_1", "\"AddressAttributes\"", "PYTHON_9.3")

	# Add field and calculate: ATTRIB_NAME_1
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_1", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "ATTRIB_NAME_1", "\"LocationID\"", "PYTHON_9.3")

	# Add field and calculate: ATTRIB_VALUE_1
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_1", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memAddrs, "ATTRIB_VALUE_1", "!NaviLine_LocationID!", "PYTHON_9.3")

	# Process: Add Field: ATTRIB_TEMP_NAME_2
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_2", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_2
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_2", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_2
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_2", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_3
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_3", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_3
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_3", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_3
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_3", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_4
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_4", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_4
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_4", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_4
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_4", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_5
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_5", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_5
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_5", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_5
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_5", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_6
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_6", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_6
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_6", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_6
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_6", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_7
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_7", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_7
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_7", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_7
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_7", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_8
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_8", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_8
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_8", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_8
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_8", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_9
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_9", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_9
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_9", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_9
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_9", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_10
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_10", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_10
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_10", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_10
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_10", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_11
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_11", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_11
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_11", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_11
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_11", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_12
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_12", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_12
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_12", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_12
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_12", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_13
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_13", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_13
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_13", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_13
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_13", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_14
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_14", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_14
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_14", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_14 
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_14", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_15
	arcpy.AddField_management(memAddrs, "ATTRIB_TEMP_NAME_15", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_15
	arcpy.AddField_management(memAddrs, "ATTRIB_NAME_15", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_15
	arcpy.AddField_management(memAddrs, "ATTRIB_VALUE_15", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: EXT_UID (3)
	arcpy.AddField_management(memAddrs, "EXT_UID", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
	logTime()
	
	# Trimming off extra fields
	logTask("***Trimming off extra fields***")
	arcpy.DeleteField_management(memAddrs,dropFields)
	logTime()
	
	# Exporting features to SQL DB
	logTask("***Exporting address features to SQL DB***")
	arcpy.FeatureClassToFeatureClass_conversion(memAddrs, coreSDE+apoFDS, "Address","L1_STR_NAME NOT IN (' ','') AND L1_PARCEL_NBR NOT IN (' ','')")
	logTime()


def owner():
	logTask("***Creating in memory parcel feature class of spatially joined parcels***")
	
	arcpy.MakeFeatureLayer_management(memSJ,owner_lyr,exStatement)
	arcpy.SelectLayerByLocation_management(owner_lyr,"HAVE_THEIR_CENTER_IN",cityLimits)
	arcpy.FeatureClassToFeatureClass_conversion(owner_lyr,inMem,"memOwner")
	
	logTime()
	
	# Add and calculate all fields for Parcel Owner
	logTask("***Starting to add all new fields and calculate them***")

	# Add and calculate field: L1_PARCEL_NBR
	arcpy.AddField_management(memOwner, "L1_PARCEL_NBR", "TEXT", "", "", "24", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_PARCEL_NBR", "!PARCELSTAT!", "PYTHON_9.3")
	
	# Process: Add Field: L1_ADDRESS1
	arcpy.AddField_management(memOwner, "L1_ADDRESS1", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_ADDRESS2
	arcpy.AddField_management(memOwner, "L1_ADDRESS2", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_ADDRESS3
	arcpy.AddField_management(memOwner, "L1_ADDRESS3", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_DATE
	arcpy.AddField_management(memBase, "AUDIT_DATE", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_ID
	arcpy.AddField_management(memBase, "AUDIT_ID", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_STATUS
	arcpy.AddField_management(memBase, "AUDIT_STATUS", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "AUDIT_STATUS", "\"A\"", "PYTHON_9.3")
	
	# Process: Add Field: L1_CITY
	arcpy.AddField_management(memOwner, "L1_CITY", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_COUNTRY
	arcpy.AddField_management(memOwner, "L1_COUNTRY", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_EMAIL
	arcpy.AddField_management(memOwner, "L1_EMAIL", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: EVENT_ID
	arcpy.AddField_management(memBase, "EVENT_ID", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_FAX
	arcpy.AddField_management(memOwner, "L1_FAX", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_FAX_COUNTRY_CODE
	arcpy.AddField_management(memOwner, "L1_FAX_COUNTRY_CODE", "TEXT", "", "", "3", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add and calculate field: Add Field: ISPRIMARY
	arcpy.AddField_management(memOwner, "ISPRIMARY", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "ISPRIMARY", "\"Y\"", "PYTHON_9.3")
	
	# Add field: Add Field: IVR_PIN_NUM
	arcpy.AddField_management(memOwner, "IVR_PIN_NUM", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: Add Field: IVR_USER_NUM
	arcpy.AddField_management(memOwner, "IVR_USER_NUM", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add and calculate field: L1_MAIL_ADDRESS1
	arcpy.AddField_management(memOwner, "L1_MAIL_ADDRESS_1", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_MAIL_ADDRESS_1", "Choice(!MAILINGADD!)", "PYTHON_9.3", codeBlock)

	# Process: Add Field: L1_MAIL_ADDRESS2
	arcpy.AddField_management(memOwner, "L1_MAIL_ADDRESS2", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_MAIL_ADDRESS3
	arcpy.AddField_management(memOwner, "L1_MAIL_ADDRESS3", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add and calculate field: L1_MAIL_CITY
	arcpy.AddField_management(memOwner, "L1_MAIL_CITY", "TEXT", "", "", "32", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_MAIL_CITY", "!MAILINGCIT!", "PYTHON_9.3")

	# Add and calculate field: L1_MAIL_COUNTRY
	arcpy.AddField_management(memOwner, "L1_MAIL_COUNTRY", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_MAIL_COUNTRY", "\"UNITED STATES OF AMERICA\"", "PYTHON_9.3")

	# Add and calculate field: L1_MAIL_STATE
	arcpy.AddField_management(memOwner, "L1_MAIL_STATE", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_MAIL_STATE", "!MAILINGSTA!", "PYTHON_9.3")
	
	# Add and calculate field: L1_MAIL_ZIP
	arcpy.AddField_management(memOwner, "L1_MAIL_ZIP", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_MAIL_ZIP", "!MAILINGZIP!", "PYTHON_9.3")
	
	# Process: Add Field: L1_OWNER_FNAME
	arcpy.AddField_management(memOwner, "L1_OWNER_FNAME", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add and calculate field: L1_OWNER_FULL_NAME
	arcpy.AddField_management(memOwner, "L1_OWNER_FULL_NAME", "TEXT", "", "", "220", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_OWNER_FULL_NAME", "Choice(!NAME_1!)", "PYTHON_9.3",codeBlock)
	
	# Process: Add Field: L1_OWNER_LNAME
	arcpy.AddField_management(memOwner, "L1_OWNER_LNAME", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_OWNER_MNAME
	arcpy.AddField_management(memOwner, "L1_OWNER_MNAME", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_OWNER_STATUS
	arcpy.AddField_management(memOwner, "L1_OWNER_STATUS", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_OWNER_TITLE
	arcpy.AddField_management(memOwner, "L1_OWNER_TITLE", "TEXT", "", "", "255", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_PHONE
	arcpy.AddField_management(memOwner, "L1_PHONE", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_PHONE_COUNTRY_CODE
	arcpy.AddField_management(memOwner, "L1_PHONE_COUNTRY_CODE", "TEXT", "", "", "3", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add and calculate field: SOURCE_SEQ_NBR
	arcpy.AddField_management(memOwner, "SOURCE_SEQ_NBR", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "SOURCE_SEQ_NBR", "\"259\"", "PYTHON_9.3")
	
	# Process: Add Field: L1_STATE
	arcpy.AddField_management(memOwner, "L1_STATE", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Add and calculate field: L1_TAX_ID
	arcpy.AddField_management(memOwner, "L1_TAX_ID", "TEXT", "", "", "20", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memOwner, "L1_TAX_ID", "!PARCELID!", "PYTHON_9.3", "")

	# Process: Add Field: L1_ZIP
	arcpy.AddField_management(memOwner, "L1_ZIP", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_1
	arcpy.AddField_management(memOwner, "ATTRIB_TEMP_NAME_1", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_NAME_1
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_1", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_1
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_1", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_2
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_2", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_2
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_2", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_2
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_2", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_3
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_3", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_3
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_3", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_3
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_3", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_4
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_4", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_4
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_4", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_4
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_4", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_5
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_5", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_5
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_5", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_5
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_5", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_6
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_6", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_6
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_6", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_6
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_6", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_7
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_7", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_7
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_7", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_7
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_7", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_8
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_8", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_8
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_8", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_8
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_8", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_9
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_9", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_9
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_9", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_9
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_9", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_10
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_10", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_10
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_10", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_10
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_10", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_11
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_11", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_11
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_11", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_11
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_11", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_12
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_12", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_12
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_12", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_12
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_12", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_13
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_13", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_13
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_13", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_13
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_13", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_14
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_14", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_14
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_14", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_14
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_14", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_TEMP_NAME_15
	arcpy.AddField_management(memOwner, "ATTRIBUTE_TEMP_NAME_15", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIBE_NAME_15
	arcpy.AddField_management(memOwner, "ATTRIB_NAME_15", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: ATTRIB_VALUE_15
	arcpy.AddField_management(memOwner, "ATTRIB_VALUE_15", "TEXT", "", "", "200", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: EXT_UID
	arcpy.AddField_management(memOwner, "EXT_UID", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
	
	logTime()
	
	# Process: Delete Identical
	logTask("***Deleting identical information***")
	arcpy.DeleteIdentical_management(memOwner, "SOURCE_SEQ_NBR;L1_PARCEL_NBR;L1_OWNER_STATUS;L1_OWNER_TITLE;L1_OWNER_FULL_NAME;ISPRIMARY;L1_OWNER_FNAME;L1_OWNER_MNAME;L1_OWNER_LNAME;L1_ADDRESS1;L1_ADDRESS2;L1_ADDRESS3;L1_CITY;L1_STATE;L1_ZIP;L1_COUNTRY;L1_PHONE;L1_FAX;L1_MAIL_ADDRESS_1;L1_MAIL_ADDRESS2;L1_MAIL_ADDRESS3;L1_MAIL_CITY;L1_MAIL_STATE;L1_MAIL_ZIP;L1_MAIL_COUNTRY;L1_TAX_ID;L1_EVENT;L1_EMAIL;ATTRIB_TEMP_NAME_1;ATTRIB_NAME_1;ATTRIB_VALUE_1;ATTRIBUTE_TEMP_NAME_2;ATTRIB_NAME_2;ATTRIB_VALUE_2;ATTRIBUTE_TEMP_NAME_3;ATTRIB_NAME_3;ATTRIB_VALUE_3;ATTRIBUTE_TEMP_NAME_4;ATTRIB_NAME_4;ATTRIB_VALUE_4;ATTRIBUTE_TEMP_NAME_5;ATTRIB_NAME_5;ATTRIB_VALUE_5;ATTRIBUTE_TEMP_NAME_6;ATTRIB_NAME_6;ATTRIB_VALUE_6;ATTRIBUTE_TEMP_NAME_7;ATTRIB_NAME_7;ATTRIB_VALUE_7;ATTRIBUTE_TEMP_NAME_8;ATTRIB_NAME_8;ATTRIB_VALUE_8;ATTRIBUTE_TEMP_NAME_9;ATTRIB_NAME_9;ATTRIB_VALUE_9;ATTRIBUTE_TEMP_NAME_10;ATTRIB_NAME_10;ATTRIB_VALUE_10;ATTRIBUTE_TEMP_NAME_11;ATTRIB_NAME_11;ATTRIB_VALUE_11;ATTRIBUTE_TEMP_NAME_12;ATTRIB_NAME_12;ATTRIB_VALUE_12;ATTRIBUTE_TEMP_NAME_13;ATTRIB_NAME_13;ATTRIB_VALUE_13;ATTRIBUTE_TEMP_NAME_14;ATTRIB_NAME_14;ATTRIB_VALUE_14;ATTRIBUTE_TEMP_NAME_15;ATTRIB_NAME_15;ATTRIB_VALUE_15;L1_PHONE_COUNTRY_CODE;L1_FAX_COUNTRY_CODE;EXT_UID", "", "0")
	logTime()
	
	# Deleting unnecessary fields
	logTask("***Deleting unnecessary fields***")
	arcpy.DeleteField_management(memOwner,dropFields)
	logTime()
	
	logTask("***Exporting final Owner feature class***")
	arcpy.FeatureClassToFeatureClass_conversion(memOwner,coreSDE+apoFDS,"Owner")
	logTime()

def parcel():
	logTask("***Creating in memory parcel feature class of spatially joined parcels***")
	arcpy.MakeFeatureLayer_management(memSJ,base_lyr,exStatement)
	arcpy.SelectLayerByLocation_management(base_lyr,"HAVE_THEIR_CENTER_IN",cityLimits)
	arcpy.FeatureClassToFeatureClass_conversion(base_lyr,inMem,"memBase")
	logTime()
	
	logTask("***Starting to add all new fields and calculate them***")
	# Add and calculate all fields for Parcel Base
	# Add field: AUDIT_DATE
	arcpy.AddField_management(memBase, "AUDIT_DATE", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_ID
	arcpy.AddField_management(memBase, "AUDIT_ID", "TEXT", "", "", "70", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add field: AUDIT_STATUS
	arcpy.AddField_management(memBase, "AUDIT_STATUS", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "AUDIT_STATUS", "\"A\"", "PYTHON_9.3")
	
	# Add and calculate field: L1_BLOCK
	arcpy.AddField_management(memBase, "L1_BLOCK", "TEXT", "", "", "15", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_BLOCK", "!BLOCKCE10!", "PYTHON_9.3")

	# Process: Add Field: L1_BOOK
	arcpy.AddField_management(memBase, "L1_BOOK", "TEXT", "", "", "8", "", "NULLABLE", "NON_REQUIRED", "")

	# Add and calculate field: L1_CENSUS_TRACT
	arcpy.AddField_management(memBase, "L1_CENSUS_TRACT", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_CENSUS_TRACT", "!TRACTCE10!", "PYTHON_9.3")

	# Add and calculate field: L1_COUNCIL_DISTRICT
	arcpy.AddField_management(memBase, "L1_COUNCIL_DISTRICT", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_COUNCIL_DISTRICT", "!Num!", "PYTHON_9.3")
	
	# Add field: EVENT_ID
	arcpy.AddField_management(memBase, "EVENT_ID", "LONG", "", "", "15", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_EXEMPT_VALUE
	arcpy.AddField_management(memBase, "L1_EXEMPT_VALUE", "DOUBLE", "", "", "15", "", "NULLABLE", "NON_REQUIRED", "")

	# Add and calculate field: L1_IMPROVED_VALUE
	arcpy.AddField_management(memBase, "L1_IMPROVED_VALUE", "DOUBLE", "", "", "15", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_IMPROVED_VALUE", "!REALIMPROV!", "PYTHON_9.3")

	# Add and calculate field: L1_INSPECTION_DISTRICT
	arcpy.AddField_management(memBase, "L1_INSPECTION_DISTRICT", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_INSPECTION_DISTRICT", "!Id!", "PYTHON_9.3")

	# Add and calculate field: L1_LAND_VALUE
	arcpy.AddField_management(memBase, "L1_LAND_VALUE", "DOUBLE", "", "", "15", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_LAND_VALUE", "!REALLANDVA!", "PYTHON_9.3")

	# Add anc calculate field: L1_LEGAL_DESC
	arcpy.AddField_management(memBase, "L1_LEGAL_DESC", "TEXT", "", "", "2000", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_LEGAL_DESC", "Choice(!LEGALDESCR!)", "PYTHON_9.3", codeBlock)

	# Process: Add Field: L1_LOT
	arcpy.AddField_management(memBase, "L1_LOT", "TEXT", "", "", "40", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_MAP_NBR
	arcpy.AddField_management(memBase, "L1_MAP_NBR", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")

	# Add and calculate field: L1_MAP_REF
	arcpy.AddField_management(memBase, "L1_MAP_REF", "TEXT", "", "", "30", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_MAP_REF", "!MAPREFEREN!", "PYTHON_9.3")

	# Process: Add Field: L1_PAGE
	arcpy.AddField_management(memBase, "L1_PAGE", "TEXT", "", "", "8", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_PARCEL
	arcpy.AddField_management(memBase, "L1_PARCEL", "TEXT", "", "", "9", "", "NULLABLE", "NON_REQUIRED", "")

	# Add and calculate field: L1_PARCEL_AREA
	arcpy.AddField_management(memBase, "L1_PARCEL_AREA", "DOUBLE", "", "", "15", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_PARCEL_AREA", "!ACREAGE!", "PYTHON_9.3")

	# Add and calculate field: L1_PARCEL_NBR
	arcpy.AddField_management(memBase, "L1_PARCEL_NBR", "TEXT", "", "", "24", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_PARCEL_NBR", "!PARCELSTAT!", "PYTHON_9.3")

	# Process: Add Field: L1_PARCEL_STATUS
	arcpy.AddField_management(memBase, "L1_PARCEL_STATUS", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_PRIMARY_PAR_FLG
	arcpy.AddField_management(memBase, "L1_PRIMARY_PAR_FLG", "TEXT", "", "", "1", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "L1_PRIMARY_PAR_FLG","\"Y\"","PYTHON_9.3")
	
	# Process: Add Field: L1_PLAN_AREA
	arcpy.AddField_management(memBase, "L1_PLAN_AREA", "TEXT", "", "", "8", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_RANGE
	arcpy.AddField_management(memBase, "L1_RANGE", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_SECTION
	arcpy.AddField_management(memBase, "L1_SECTION", "LONG", "", "", "2", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Add and calculate field: SOURCE_SEQ_NBR
	arcpy.AddField_management(memBase, "SOURCE_SEQ_NBR", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.CalculateField_management(memBase, "SOURCE_SEQ_NBR", "\"259\"", "PYTHON_9.3")
	
	# Process: Add Field: L1_SUBDIVISION
	arcpy.AddField_management(memBase, "L1_SUBDIVISION", "TEXT", "", "", "240", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_SUPERVISOR_DISTRICT
	arcpy.AddField_management(memBase, "L1_SUPERVISOR_DISTRICT", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: L1_TOWNSHIP
	arcpy.AddField_management(memBase, "L1_TOWNSHIP", "TEXT", "", "", "10", "", "NULLABLE", "NON_REQUIRED", "")
	
	# Process: Add Field: L1_TRACT
	arcpy.AddField_management(memBase, "L1_TRACT", "TEXT", "", "", "80", "", "NULLABLE", "NON_REQUIRED", "")

	# Process: Add Field: EXT_UID (2)
	arcpy.AddField_management(memBase, "EXT_UID", "TEXT", "", "", "100", "", "NULLABLE", "NON_REQUIRED", "")
	logTime()
	
	# Deleting unnecessary fields
	logTask("***Deleting unnecessary fields***")
	arcpy.DeleteField_management(memBase,dropFields)
	logTime()
	
	# Final export of Parcel feature class
	logTask("***Exporting final Parcel feature class***")
	arcpy.FeatureClassToFeatureClass_conversion(memBase,coreSDE+apoFDS,"Parcel")
	logTime()
	
def main():
	startTime = datetime.now()
	
	# # Disconnecting all users and disallow DB connections
	# logTask("Disconnecting all users and disallowing connections to {}".format(coreSDE))
	#arcpy.DisconnectUser(coreSDE,"ALL")
	#arcpy.AcceptConnections(coreSDE, False)
	# logTime()
	
	address()
	
	logTask("***Creating in memory parcel feature class***")
	arcpy.FeatureClassToFeatureClass_conversion(parcels,inMem,"memParcels")
	logTime()
	
	logTask("***Spatial joining county blocks, census tracts, and inspector areas***")
	# Process: Spatial Join: Parcel SB + 2010 Census Records
	arcpy.SpatialJoin_analysis(memParcels, countyBlocks, memSJ, "JOIN_ONE_TO_ONE", "KEEP_ALL","", "INTERSECT", "", "")

	# Process: Spatial Join: Parcel/Census + District
	arcpy.SpatialJoin_analysis(memSJ, councilDistricts, memParcels, "JOIN_ONE_TO_ONE", "KEEP_ALL","","INTERSECT", "", "")
	
	# Process: Spatial Join: Parcel/Census/District/Inspector
	arcpy.SpatialJoin_analysis(memParcels, inspectorAreas, memSJ, "JOIN_ONE_TO_ONE", "KEEP_ALL","","INTERSECT", "", "")
	logTime()
	
	fields = arcpy.ListFields(memSJ)
	dropFields = []
	passFields =["OID","Geometry","Guid"]
	
	for field in fields:
		print field.name, "with type {}".format(field.type)
		if field.type in passFields:
			pass
		else:
			dropFields.append(field.name)
		
	# Copy joined parcel feature class into four separate branches
	exStatement = "PARCELSTAT NOT IN ('0',' ','') AND PARCELSTAT IS NOT NULL"
	
	# codeBlock is a common function that strips white space and formats data correctly
	codeBlock = textwrap.dedent("""\
				def Choice(input):
					input.strip()
					input.replace(","," ")
					output = " ".join(input.split())
					
					if len(output) > 220:
						return output[:220]
					else:
						return output""")
	
	owner()					
	parcel()

	# # Process: Create Address Locator
	# arcpy.CreateAddressLocator_geocoding("US Address - Single House", "'Database Connections\\Land Management (editor).sde\\LandManagement.LANDMANAGEMENTEDITOR.AddressDatasets\\LandManagement.LANDMANAGEMENTEDITOR.CleanCorrectAddresses' 'Primary Table'", "'Feature ID' '' VISIBLE NONE;'*House Number' HouseNumber VISIBLE NONE;Side '' VISIBLE NONE;'Prefix Direction' StreetDirection_Pre VISIBLE NONE;'Prefix Type' '' VISIBLE NONE;'*Street Name' StreetName VISIBLE NONE;'Suffix Type' StreetSuffix VISIBLE NONE;'Suffix Direction' StreetDirection_Post VISIBLE NONE;'City or Place' City1 VISIBLE NONE;'ZIP Code' ZipCode VISIBLE NONE;State State1 VISIBLE NONE;'Street ID' '' VISIBLE NONE;'Display X' POINT_X VISIBLE NONE;'Display Y' POINT_Y VISIBLE NONE;'Min X value for extent' '' VISIBLE NONE;'Max X value for extent' '' VISIBLE NONE;'Min Y value for extent' '' VISIBLE NONE;'Max Y value for extent' '' VISIBLE NONE;'Additional Field' '' VISIBLE NONE;'Altname JoinID' '' VISIBLE NONE", LandManagement_LANDMANAGEMENTEDITOR_CleanedAddressLocator, "", "DISABLED")
	
	#Allow connections to Core DB
	# # print "Allowing all users to reconnect to {}".format(coreSDE)
	# #arcpy.AcceptConnections(coreSDE, True)
	
	print ""
	print "*********************************"
	print "Total script execution time"
	print datetime.now() - startTime
	
main()
